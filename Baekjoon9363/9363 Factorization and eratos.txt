#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cmath>
using namespace std;
int Prim[1000001];
void sosu() {
	int n = 1000000;
	for (int i = 2; i <= n; i++)
		Prim[i] = i;
	for (int i = 2; i <= sqrt(n); i++) {
		if (Prim[i] == 0) continue;
		for (int j = i + i; j <= n; j += i) {
			Prim[j] = 0;
		}
	}
}
vector<int> hae(int n) {
	vector<int> v;
	int s = 2;
	while (n>1) {
		if (n % s == 0) {
			v.push_back(s);
			n /= s;
		}
		else s++;
	}
	return v;
}
int main() {
	int t;
	cin >> t;
	sosu();
	for (int i = 0; i < t; i++) {
		int a, b; cin >> a >> b;
		vector<int> A;
		vector<int> B;
		for (int j = 0; j < a; j++) {
			int t; cin >> t;
			if (t == 1) continue;
			if (Prim[t] != 0) A.push_back(t);
			else {
				vector<int> temp = hae(t);
				A.insert(A.end(), temp.begin(), temp.end());
			}
		}
		for (int j = 0; j < b; j++) {
			int t; cin >> t;
			if (t == 1) continue;
			if (Prim[t] != 0) B.push_back(t);
			else {
				vector<int> temp =hae(t);
				B.insert(B.end(), temp.begin(), temp.end());
			}
		}
		for (int j = 0; j < A.size(); j++) {
			for (int k = 0; k < B.size(); k++) {
				if (A[j] == B[k]) {
					A.erase(A.begin() + j);
					j--;
					B.erase(B.begin() + k);
					break;
				}
			}
		}
		long long A_mul=1;
		long long B_mul=1;
		for (int j = 0; j < A.size(); j++)
			A_mul *= A[j];
		for (int j = 0; j < B.size(); j++)
			B_mul *= B[j];
		cout << "Case #" << i + 1 << ": " << A_mul << " / " << B_mul << "\n";
	}
	
}
